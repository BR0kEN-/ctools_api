<?php
/**
 * @file
 * Chaos Tool Suite API.
 *
 * @author Sergii Bondarenko <sb@firstvector.org>
 */

// Easiest way to obtain path to location directory.
define('CTOOLS_API_MODULE_PATH', trim(str_replace(DRUPAL_ROOT, '/', __DIR__), '/'));
define('CTOOLS_API_MODULE_TITLE', 'CTools API');

// Include auxiliary functionality.
require_once 'includes/ctools_api.common.inc';
// Include API for "styles" plugins provided by Panels.
require_once 'includes/plugin_types/panels/styles.inc';
// Include API for "content_types" plugins provided by CTools.
require_once 'includes/plugin_types/ctools/content_types.inc';

ctools_api_register_autoloader_path(CTOOLS_API_MODULE_PATH . '/includes');

spl_autoload_register(function ($namespace) {
  $namespace = str_replace('\\', '/', $namespace);

  // @codingStandardsIgnoreStart
  foreach (ctools_api_register_autoloader_path() as $path) {
    $file = "$path/$namespace.inc";

    if (file_exists($file)) {
      require_once $file;
      break;
    }
  }
  // @codingStandardsIgnoreEnd
});

/**
 * Register objects loader.
 *
 * @param string $path
 *   Path to directory with objects.
 */
function ctools_api_register_autoloader_path($path = '') {
  static $paths = [];

  if (!empty($path) && !isset($paths[$path])) {
    $paths[$path] = $path;
  }

  return $paths;
}

function ctools_api_search_plugins() {
  $cache = cache_get(__FUNCTION__);
  $files = [];

  if (FALSE === $cache || empty($cache->data)) {
    $hook = 'ctools_api_plugins_directory';

    foreach (module_implements($hook) as $module_name) {
      $function = $module_name . '_' . $hook;

      if (function_exists($function)) {
        $module_path = drupal_get_path('module', $module_name);
        $sources = $module_path . '/' . $function();

        ctools_api_register_autoloader_path($sources);

        foreach (file_scan_directory($sources, '/\.inc$/') as $file) {
          $object = str_replace('/', '\\', trim(str_replace([$sources, '.inc'], '', $file->uri), '/'));

          if (class_exists($object)) {
            $file->object = $object;
            $file->sources = $sources;
            $file->implements = class_implements($object);
            $file->module_name = $module_name;
            $file->module_path = $module_path;

            $files[] = $file;
          }
        }
      }
    }

    cache_set(__FUNCTION__, $files);
  }
  else {
    $files = $cache->data;
  }

  return $files;
}

function ctools_api_get_plugins($original_plugin_type) {
  $constructor = "ctools_api_$original_plugin_type";

  if (!function_exists($constructor)) {
    throw new \InvalidArgumentException(t('The "@type" plugin type is unsupported!', [
      '@type' => $original_plugin_type,
    ]));
  }

  $plugin_type = ucfirst(ctools_api_to_camel_case($original_plugin_type));
  $namespace = array_merge(ctools_api_namespace(), [$plugin_type]);
  $plugins = [];

  foreach (ctools_api_search_plugins() as $file) {
    ctools_api_register_autoloader_path($file->sources);

    $interface = implode('\\', array_merge($namespace, [$plugin_type . 'Interface']));

    if (isset($file->implements[$interface])) {
      $plugins[$file->object] = array_merge(ctools_api_base_plugin_assets($constructor(ctools_api_base_plugin_info($file->uri, $file->object), $original_plugin_type, $file->implements, $file->object)), [
        'name' => $file->name,
        'path' => dirname($file->uri),
        'file' => $file->filename,
        'object' => $file->object,
        'location' => $file->uri,
        'plugin type' => $original_plugin_type,
        'plugin module' => $file->module_name,
        'plugin module path' => $file->module_path,
      ]);
    }
  }

  return $plugins;
}

/**
 * @param string $path
 * @param \CTools\Plugins\ContentTypes\ContentTypesInterface|string $object
 *
 * @return array
 */
function ctools_api_base_plugin_info($path, $object) {
  $information = $object::info();
  $dependencies = $object::dependencies();

  $information['title'] = $object::name();
  $information['machine_name'] = ctools_api_to_underscore(pathinfo($path, PATHINFO_FILENAME));

  // Process content type dependencies.
  if (!empty($dependencies)) {
    $disabled = array_diff_key($dependencies, array_filter(array_map('module_exists', $dependencies)));

    if (!empty($disabled)) {
      watchdog(CTOOLS_API_MODULE_TITLE, 'The following dependencies of "@title" content type are disabled or does not exists: "@modules".', [
        '@title' => $information['title'],
        '@modules' => implode('", "', $disabled),
      ]);

      return [];
    }
  }

  return $information;
}

function ctools_api_base_plugin_assets(array $information) {
  static $theme_registry = [];

  if (empty($information['theme hooks'])) {
    return $information;
  }

  if (empty($theme_registry)) {
    $theme_registry = theme_get_registry();
  }

  // @see ctools_api_set_plugin_theme_variants()
  foreach ($information['theme hooks'] as $data) {
    list($variant, $hook) = $data;

    if (!isset($theme_registry[$hook])) {
      continue;
    }

    // Generate paths for assets:
    // - "themes/bartik/css/ctools/content-types/example/example--default.css";
    // - "themes/bartik/js/ctools/content-types/example/example--default.js";
    foreach (['css', 'js'] as $asset) {
      $information[$asset][] = str_replace(
        ['_', 'templates'],
        ['-', $asset],
        "{$theme_registry[$hook]['path']}/{$information['machine_name']}--$variant.$asset"
      );
    }
  }

  return $information;
}

/**
 * Implements hook_menu().
 */
function ctools_api_menu() {
  $routes = [];

  $routes['ctools_api/get_fid_by_uri'] = [
    'type' => MENU_CALLBACK,
    'file' => 'includes/ctools_api.pages.inc',
    'page callback' => '_ctools_api_get_fid_by_uri',
    'access arguments' => ['access content'],
  ];

  return $routes;
}

/**
 * Implements hook_theme().
 */
function ctools_api_theme(array $existing, $type, $theme, $path) {
  $suggestions = [];

  $suggestions['ctools'] = [
    'render element' => 'elements',
  ];

  return $suggestions;
}

/**
 * Implements hook_form_alter().
 */
function ctools_api_form_alter(array &$form, array &$form_state, $form_id) {
  switch ($form_id) {
    case '_ctools_api_content_types_base_settings_form':
      // Wrap form in a container for replacing the markup after AJAX calls.
      $form['#prefix'] = '<div id="' . $form_id . '">';
      $form['#suffix'] = '</div>';

      // Add class to buttons to be able to distinguish them.
      foreach (['return', 'cancel'] as $button) {
        $form['buttons'][$button]['#attributes']['class'][] = $button;
      }
      break;
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ctools_api_ctools_plugin_directory($owner, $plugin_type) {
  return "plugins/$owner/$plugin_type";
}
