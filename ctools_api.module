<?php
/**
 * @file
 * Chaos Tool Suite API.
 *
 * @author Sergey Bondarenko <broken@propeople.com.ua>
 */

define('CTOOLS_API_MODULE_PATH', drupal_get_path('module', 'ctools_api'));

require_once 'includes/autoload/ctools_api.content_types.inc';
require_once 'includes/autoload/ctools_api.styles.inc';

// @codingStandardsIgnoreStart
spl_autoload_register(function ($namespace) {
  $namespace_parts = explode('\\', $namespace);

  if (['CTools', 'API'] === array_slice($namespace_parts, 0, 2)) {
    $file = CTOOLS_API_MODULE_PATH . '/includes/' . implode('/', $namespace_parts) . '.inc';

    if (file_exists($file)) {
      require_once $file;
    }
  }
});
// @codingStandardsIgnoreEnd

function ctools_api_get_plugins($type, $reset = TRUE) {
  $cache = cache_get(__FUNCTION__);
  $plugin = ucfirst(ctools_api_to_camel_case($type));
  $plugins = [];

  if ($reset || (FALSE === $cache || empty($cache->data))) {
    $hook = 'ctools_api_plugins_directory';

    foreach (module_implements($hook) as $module_name) {
      $module_path = drupal_get_path('module', $module_name);
      $function = $module_name . '_' . $hook;

      if (function_exists($function)) {
        $directory = $module_path . '/' . $function();

        foreach (file_scan_directory($directory, '/\.inc$/') as $file) {
          require_once $file->uri;

          // @todo
          $namespace = implode('\\', ['CTools', 'API', $plugin, $file->name]);
          $interface = implode('\\', ['CTools', 'API', $plugin, $plugin . 'Interface']);
          $function = "ctools_api_$type";

          if (
            class_exists($namespace) &&
            in_array($interface, class_implements($namespace)) &&
            function_exists($function)
          ) {
            $plugins[$file->name] = array_merge(ctools_api_base_plugin_assets($function(ctools_api_base_plugin_info($file->uri, $namespace), $namespace, $type)), [
              'name' => $file->name,
              'path' => dirname($file->uri),
              'file' => basename($file->uri),
              'object' => $namespace,
              'module' => $module_name,
              'location' => $file->uri,
              'plugin type' => $type,
              'plugin module' => $module_name,
            ]);
          }
        }
      }
    }

    cache_set(__FUNCTION__, $plugins);
  }
  else {
    $plugins = $cache->data;
  }

  return $plugins;
}

/**
 * @param string $path
 * @param \CTools\API\ContentTypes\ContentTypesInterface|string $object
 *
 * @return array
 */
function ctools_api_base_plugin_info($path, $object) {
  $information = $object::info();
  $dependencies = $object::dependencies();

  $information['title'] = $object::name();
  $information['machine_name'] = ctools_api_to_underscore(pathinfo($path, PATHINFO_FILENAME));

  // Process content type dependencies.
  if (!empty($dependencies)) {
    $disabled = array_diff_key($dependencies, array_filter(array_map('module_exists', $dependencies)));

    if (!empty($disabled)) {
      watchdog('CTools API', 'The following dependencies of "@title" content type are disabled or does not exists: "@modules".', [
        '@title' => $information['title'],
        '@modules' => implode('", "', $disabled),
      ]);

      return [];
    }
  }

  return $information;
}

function ctools_api_base_plugin_assets(array $information) {
  static $theme_registry = [];

  if (empty($theme_registry)) {
    $theme_registry = theme_get_registry();
  }

  if (empty($information['theme suggestions'])) {
    return $information;
  }

  foreach ($information['theme suggestions'] as $data) {
    list($theme, $hook) = $data;

    if (!isset($theme_registry[$hook])) {
      continue;
    }

    $theme_path = $theme_registry[$hook]['theme path'];
    // Imagine that our template located in:
    // "themes/bartik/templates/ctools/content-types/example".
    // Here we trim "themes/bartik/templates" and
    // obtain "/ctools/content-types/example".
    $assets_path = str_replace("$theme_path/templates", '', $theme_registry[$hook]['path']);

    // Then we generate paths for assets:
    // - "themes/bartik/css/ctools/content-types/example/example--default.css";
    // - "themes/bartik/js/ctools/content-types/example/example--default.js";
    foreach (['css', 'js'] as $asset) {
      $information[$asset][] = str_replace('_', '-', "$theme_path/$asset$assets_path/{$information['machine_name']}--$theme.$asset");
    }
  }

  return $information;
}

function ctools_api_to_camel_case($argument) {
  if (!is_array($argument)) {
    $argument = explode('_', $argument);
  }

  return lcfirst(implode(array_map('ucfirst', $argument)));
}

function ctools_api_to_underscore($argument) {
  return strtolower(preg_replace('/(?<=\w)(?=[A-Z])/', '_$1', $argument));
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ctools_api_ctools_plugin_directory($owner, $plugin_type) {
  return "plugins/$owner/$plugin_type";
}

/**
 * Implements hook_menu().
 */
function ctools_api_menu() {
  $routes = [];

  foreach ([
    'get_fid_by_uri' => [
      'access arguments' => ['access content'],
    ],
  ] as $callback => $definition) {
    $routes['ctools_api/' . $callback] = $definition + array(
      'type' => MENU_CALLBACK,
      'file' => 'includes/ctools_api.menu.inc',
      'page callback' => "_ctools_api_$callback",
    );
  }

  return $routes;
}

/**
 * Implements hook_theme().
 */
function ctools_api_theme(array $existing, $type, $theme, $path) {
  $suggestions = [];

  foreach (['content_types', 'styles'] as $type) {
    $suggestions["ctools__$type"] = [
      'render element' => 'elements',
    ];
  }

  return $suggestions;
}

/**
 * Implements hook_form_alter().
 */
function ctools_api_form_alter(array &$form, array &$form_state, $form_id) {
  switch ($form_id) {
    case '_ctools_api_content_types_base_settings_form':
      // Wrap form in a container for replacing the markup after AJAX calls.
      $form['#prefix'] = '<div id="' . $form_id . '">';
      $form['#suffix'] = '</div>';

      // Add class to buttons to be able to distinguish them.
      foreach (['return', 'cancel'] as $button) {
        $form['buttons'][$button]['#attributes']['class'][] = $button;
      }
      break;
  }
}

/**
 * Replace all "_" and ":" by "-".
 *
 * @param string $string
 *   Input string.
 *
 * @return string
 *   Output string with replaced symbols.
 */
function _ctools_api_dashes($string) {
  return str_replace(['_', ':'], '-', ctools_api_to_underscore($string));
}

/**
 * Build name for style plugin hook and check it availability.
 *
 * @param string $plugin_type
 *   The type of plugin.
 * @param string $renderer_type
 *   Renderer type (pane or region).
 * @param string $plugin_name
 *   Machine name of the plugin.
 * @param string $hook
 *   Pseudo hook name. Like "render_pane", "settings_form" etc.
 *
 * @return string
 *   Hook name or empty string if function does not exist.
 */
function _ctools_api_callback($plugin_type, $renderer_type, $plugin_name, $hook) {
  $func = "_ctools_api_{$plugin_type}_{$plugin_name}_{$renderer_type}_{$hook}";

  return function_exists($func) ? $func : '';
}

/**
 * Generate theme suggestions for CTools content type.
 *
 * @param array $data
 *   Updated array of CTools content type definition.
 * @param string $plugin_type
 *   Plugin type machine name.
 * @param string $plugin_name
 *   Plugin machine name.
 */
function _ctools_api_set_plugin_theme(array &$data, $plugin_type, $plugin_name) {
  if (!isset($data['theme hooks']) || !is_array($data['theme hooks'])) {
    $data['theme hooks'] = [];
  }

  $data['theme hooks']['default'] = t('Default');

  // Create all theme suggestions.
  foreach ($data['theme hooks'] as $hook => $title) {
    $data['theme suggestions'][] = [$hook, _ctools_api_theme_suggestion($plugin_type, $plugin_name, $hook)];
  }
}

/**
 * Build theme suggestion.
 *
 * @param string $plugin_type
 *   Plugin type machine name.
 * @param string $plugin_name
 *   Plugin machine name.
 * @param string $hook
 *   Theme hook.
 *
 * @return string
 *   Theme hook name.
 */
function _ctools_api_theme_suggestion($plugin_type, $plugin_name, $hook) {
  return ctools_api_to_underscore(implode('__', ['ctools', $plugin_type, $plugin_name, $hook]));
}

/**
 * Apply theme suggestion.
 *
 * @param string $plugin_type
 *   Plugin type machine name.
 * @param string $plugin_name
 *   Plugin machine name.
 * @param string $hook
 *   Theme hook.
 * @param array $variables
 *   An array of variables that will be passed to template.
 *
 * @throws \Exception
 *   When theme is not initialized.
 *
 * @return string
 *   HTML content.
 */
function _ctools_api_apply_plugin_theme($plugin_type, $plugin_name, $hook, array $variables) {
  return theme(_ctools_api_theme_suggestion($plugin_type, ctools_api_to_underscore($plugin_name), $hook), [
    'content' => $variables,
  ]);
}
